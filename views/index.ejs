<%- include("partials/header.ejs") %>
  <!-- alert type: jquery-bs-confirm  -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  <!-- my css -->
  <link rel="stylesheet" href="../style/style.css" />


  <body class="scroll-bar">
    <%- include("partials/fixed-menu.ejs") %>
      <%- include("list-books.ejs") %>
        <!-- alert type: jquery-bs-confirm -->
        <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
          integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
          crossorigin="anonymous"></script>
        <script src="../js/dist/jquery-bs-confirm.js"></script>

        <!-- alert type: sweetalert2 https://sweetalert2.github.io/#examples -->
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.5/dist/sweetalert2.all.min.js"></script>

        <script>
          let updated = '<%=locals.flagUpdated%>';
          let deleted = '<%=locals.flagDeleted%>';
          let error_msg = '<%=locals.error%>';
          let total = '<%= books.length %>';
          let inserted = '<%=locals.flagInserted%>';
          function deleteBook(id, name) {
            /* alert type: jquery-bs-confirm                
            */
            // $.confirm({
            //   title: 'Please Confirm Your Action',
            //   message: `Do you really want to delete book with title ${name} ?`,
            //   animationClass: 'fade',
            //   onConfirm() {
            //     alert('Book with ' + id + ' will deleted.');
            //     Swal.fire({
            //       title: "Deleted!",
            //       text: "Your file has been deleted.",
            //       icon: "success"
            //     });
            //   },
            //   onCancel() {
            //     alert('Cancel');
            //     Swal.fire({
            //       title: "Cancelled",
            //       text: "Your imaginary file is safe :)",
            //       icon: "error"
            //     });
            //   }

            // });

            Swal.fire({
              title: "Are you sure?",
              text: `Do you really want to delete book with title ${name} ?`,
              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: "Yes, delete it!"
            }).then((result) => {
              if (result.isConfirmed) {
                $('#book_id_to_delete').attr("value", id);
                $('#book_title_to_delete').attr("value", name);
                $('#btn_delete').parents("form").submit();
              } else if (result.dismiss === Swal.DismissReason.cancel) {
                Swal.fire("Changes won't be applied", "", "info");
              }
            });
          }

          function editBook(id, bookName) {

            if ($('#edit-btn' + id).text().trim() === 'Edit') {
              $('#edit-btn' + id).html('<img src="../images/pencil-square.svg" alt="Update Image Icon" /> Update');
              /* title */
              $('#title' + id).attr("hidden", "hidden");
              $('#titleInput' + id).attr("type", "input");
              $('#titleInput' + id).addClass("input-width");
              /* publishDate*/
              $('#publishDateSpan' + id).attr("hidden", "hidden");
              $('#publishDateInput' + id).attr("type", "date");
              /* isbn */
              $('#isbnSpan' + id).attr("hidden", "hidden");
              $('#isbnInput' + id).attr("type", "text");
              /* author */
              $('#authorSpan' + id).attr("hidden", "hidden");
              $('#authorSelect' + id).removeAttr("hidden");
              /* description */
              $('#descSpan' + id).attr("hidden", "hidden");
              $('#descTextArea' + id).addClass("text-area-size");
              $('#descTextArea' + id).removeAttr("hidden");
            } else if ($('#edit-btn' + id).text().trim() === 'Update') {
              $('#edit-btn' + id).html('<img src="../images/pencil-square.svg" alt="Edit Image Icon" /> Edit');
              /*title*/
              $('#title' + id).removeAttr("hidden");
              $('#titleInput' + id).removeClass("input-width");
              $('#titleInput' + id).attr("type", "hidden");
              /* publishDate*/
              $('#publishDateSpan' + id).removeAttr("hidden");
              $('#publishDateInput' + id).attr("type", "hidden");
               /* isbn */
              $('#isbnSpan' + id).removeAttr("hidden");
              $('#isbnInput' + id).attr("type", "hidden");
              /* author */
              $('#authorSpan' + id).removeAttr("hidden");
              $('#authorSelect' + id).attr("hidden", "hidden");
              /* description */
              $('#descSpan' + id).removeAttr("hidden");
              $('#descTextArea' + id).attr("hidden", "hidden");
              $('#descTextArea' + id).removeClass("text-area-size");

              /*Get values to send to the backend */

              $('#book_id').attr("value", $('#title' + id).attr("id").slice(5)); // extract the id. e.g: title45 => 45
              $('#title').attr("value", $('#titleInput' + id).val());
              $('#author_id').attr("value", $('#authorSelect' + id + ' :selected').val());
              $('#publish_date').attr("value", $('#publishDateInput' + id).val());
              $('#isbn').attr("value", $('#isbnInput' + id).val());
              $('#description').attr("value", $('#descTextArea' + id).val());
              Swal.fire({
                title: "Are you sure?",
                text: `Do you really want to update book with title ${bookName} ?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, update it!"
              }).then((result) => {
                if (result.isConfirmed) {
                  $('#update_btn').parents("form").submit();
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                  Swal.fire("Changes won't be applied", "", "info");
                }
              });
            }

          }

          /* alert type: sweetalert  */
          $(window).on("load", function () {
            if (updated === "true") {
              Swal.fire({
                title: "Info",
                text: "The Book was successfully Updated",
                icon: "success"
              })
            } else if( deleted === "true") {
              Swal.fire({
                title: "Info",
                text: "The Book was successfully deleted",
                icon: "success"
              });
            } else if ( inserted === "true") {
              Swal.fire({
                title: "Info",
                text: "New Review was successfully created",
                icon: "success"
              });
            } else if ( error_msg.length > 0 ){
              Swal.fire({
                title: error_msg.toLowerCase().includes("implemented") ? "warning" : "error",
                text: error_msg,
                icon: error_msg.toLowerCase().includes("implemented") ? "warning" : "error"
              });
            }
          });
          /* action to add review on books without which don't have any review */
          function showReviewForm( bookId ) {
            let value = $('#cardview' + bookId).attr("style");
           
            if ( value === 'display: none;' || value === undefined){
              $('#edit-btn' + bookId).attr("disabled", "disabled");
              $('#delete-btn' + bookId).attr("disabled", "disabled");             
              
            } else if ( value === 'display: block;') {              
              $('#edit-btn' + bookId).removeAttr("disabled");
              $('#delete-btn' + bookId).removeAttr("disabled");
            }             
            $('#cardview' + bookId).slideToggle();          
          }

          /* change stars */ 
          function changeStar( star, id ){            
            let stars = ["","star-one", "star-two", "star-three", "star-four", "star-five"];
            let starPosition = stars.findIndex(item => item === star);               
            for(let count=1; count <= 5; count++){
              if ( count <= starPosition ){                
                $('#' + stars[count] + id + ' img').attr("src", "../images/star-fill.svg"); // add painted stars
                $('#rating_id'+id).attr("value",starPosition);
                $('#book'+id).attr("value",id);
              } else {                
                $('#' + stars[count] + id + ' img').attr("src", "../images/star.svg"); // remove painted stars
              }
            }        
          }
          
          /* search in html document (isbn, title and author ) */
          $('#search-input').on("input", () => {
          let typing = $('#search-input').val();
          // $('#output').text(typing); // used for testing purpose only         
          let cardsItems = $('.item > .card'); // get all card item displayed on the page
          let grandSons = []; // declare all grandsons because either card-title or card-date-and-ratings they will have
          let find = false;
          for (let i = 0; i < cardsItems.length; i++) { // loop through all the cards
            let father = cardsItems[i]; // each card will called facther
            // get children for each father
            for (let j = 0; j < father.childElementCount; j++) {
              let sons = father.children; // get all children that belongs to each father
              for (let k = 0; k < sons.length; k++) { // loop through all the children of the specific father
                grandSons = sons[k].children; // get all children(grandson of father) that belong to one son
                if (sons[k].classList.contains("card-title")) { // check if grandSon has a class named card-title
                  for (let l = 0; l < grandSons.length; l++) {  // loop through each grandson         
                    if (grandSons[l].innerHTML.toLowerCase().indexOf(typing.toLowerCase()) > -1) // check if all/part of content inside grandson is equal to what the user typed
                      find = true;  // receive true if there a match                                       
                  }                 
                } else if (sons[k].classList.contains("card-date-and-ratings")) { // comes here if a son does have a class card-date-and-ratings
                  for (let m = 0; m < grandSons.length; m++) {                    
                    let greatGrandSons = grandSons[m].children;                    
                    for (let n = 0; n < greatGrandSons.length; n++) {
                      if (!greatGrandSons[n].hidden && (greatGrandSons[n].id.indexOf("isbnSpan") > -1 || greatGrandSons[n].id.indexOf("authorSpan") > -1)) { // will get greatgrandsons that aren't hidden (elements put because of edit functionality) and chiefly will get hold of elements with ID starting with string countryNameSpan                        
                        if (greatGrandSons[n].outerText.toLowerCase().indexOf(typing.toLowerCase()) > -1) {
                          find = true;                          
                        }
                      }
                    }
                  }
                }
                father.hidden = find ? false : true;
              }
            }//       
            find = false;
          }
        }); 
        </script>
        <script src="../js/hidden-menu.js"></script>
        <%- include("partials/footer.ejs")%>
  </body>

  </html>